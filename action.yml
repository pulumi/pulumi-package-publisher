name: 'Pulumi Package publisher'
description: 'A GitHub Action that publishes provider SDKs'
inputs:
  sdk:
    description: |
      The name of the language SDK being published.

      To enable a single language, specify that language:

          sdk: nodejs

      To enable multiple languages, specify them:

          sdk: nodejs,python

      To enable all languages (the default), specify 'all':

          sdk: all

      To disable only a single language (but enable all others), use:

          sdk: all,!nodejs

    required: false
    default: 'all'

# The if: statement for the above is:
#
# if: (contains(inputs.sdk, '${LANGUAGE}') || (contains(inputs.sdk, 'all') && !contains(inputs.sdk, '!all'))) && !contains(inputs.sdk, '!${LANGUAGE}')
#
# If can be read as:
#
#    If (${LANGUAGE} or all (but not !all)) and not !${LANGUAGE}

runs:
  using: "composite"
  steps:
    - name: Verify input
      run: echo 'Publishing SDK:' && echo ${{ inputs.sdk }}
      shell: bash
    - name: Checkout Repo
      uses: actions/checkout@v3
      with:
        repository: ${{ github.repository }}
    - name: Unshallow clone for tags
      run: git fetch --prune --unshallow --tags
      shell: bash
    - name: Install Go
      uses: actions/setup-go@v3
      with:
        go-version: ${{ env.GOVERSION }}
    - name: Install pulumictl
      uses: jaxxstorm/action-install-gh-release@v1.5.0
      with:
        repo: pulumi/pulumictl
    - name: Install Pulumi CLI
      uses: pulumi/action-install-pulumi-cli@v2
    - name: Setup Node
      if: (contains(inputs.sdk, 'nodejs') || (contains(inputs.sdk, 'all') && !contains(inputs.sdk, '!all'))) && !contains(inputs.sdk, '!nodejs')
      uses: actions/setup-node@v3
      with:
        node-version: ${{ env.NODEVERSION }}
        registry-url: https://registry.npmjs.org
    - name: Download nodejs SDK
      if: (contains(inputs.sdk, 'nodejs') || (contains(inputs.sdk, 'all') && !contains(inputs.sdk, '!all'))) && !contains(inputs.sdk, '!nodejs')
      uses: actions/download-artifact@v2
      with:
        name: nodejs-sdk.tar.gz
        path: ${{ github.workspace }}/sdk/
    - name: Uncompress nodejs SDK
      if: (contains(inputs.sdk, 'nodejs') || (contains(inputs.sdk, 'all') && !contains(inputs.sdk, '!all'))) && !contains(inputs.sdk, '!nodejs')
      run: tar -zxf ${{ github.workspace }}/sdk/nodejs.tar.gz -C
        ${{ github.workspace }}/sdk/nodejs
      shell: bash
    - name: Run npm whoami
      if: (contains(inputs.sdk, 'nodejs') || (contains(inputs.sdk, 'all') && !contains(inputs.sdk, '!all'))) && !contains(inputs.sdk, '!nodejs')
      run: npm whoami
      shell: bash
      env:
        NODE_AUTH_TOKEN: ${{ env.NODE_AUTH_TOKEN }}
    - name: Publish Node
      if: (contains(inputs.sdk, 'nodejs') || (contains(inputs.sdk, 'all') && !contains(inputs.sdk, '!all'))) && !contains(inputs.sdk, '!nodejs')
      run: pulumi package publish-sdk nodejs --path ${{ github.workspace }}/sdk/nodejs/bin
      shell: bash
      env:
        NODE_AUTH_TOKEN: ${{ env.NODE_AUTH_TOKEN }}
    - name: Setup DotNet
      if: (contains(inputs.sdk, 'dotnet') || (contains(inputs.sdk, 'all') && !contains(inputs.sdk, '!all'))) && !contains(inputs.sdk, '!dotnet')
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: ${{ env.DOTNETVERSION }}
    - name: Download dotnet SDK
      if: (contains(inputs.sdk, 'dotnet') || (contains(inputs.sdk, 'all') && !contains(inputs.sdk, '!all'))) && !contains(inputs.sdk, '!dotnet')
      uses: actions/download-artifact@v2
      with:
        name: dotnet-sdk.tar.gz
        path: ${{ github.workspace }}/sdk/
    - name: Uncompress dotnet SDK
      if: (contains(inputs.sdk, 'dotnet') || (contains(inputs.sdk, 'all') && !contains(inputs.sdk, '!all'))) && !contains(inputs.sdk, '!dotnet')
      run: tar -zxf ${{ github.workspace }}/sdk/dotnet.tar.gz -C
        ${{ github.workspace }}/sdk/dotnet
      shell: bash
    - name: Publish dotnet SDK
      if: (contains(inputs.sdk, 'dotnet') || (contains(inputs.sdk, 'all') && !contains(inputs.sdk, '!all'))) && !contains(inputs.sdk, '!dotnet')
      run: find "${{ github.workspace }}/sdk/dotnet/bin/Debug/" -name 'Pulumi.*.nupkg'
        -exec dotnet nuget push -k "${NUGET_PUBLISH_KEY}" -s https://api.nuget.org/v3/index.json {} \;
      shell: bash
    - name: Setup Python
      if: (contains(inputs.sdk, 'python') || (contains(inputs.sdk, 'all') && !contains(inputs.sdk, '!all'))) && !contains(inputs.sdk, '!python')
      uses: actions/setup-python@v2
      with:
        python-version: ${{ env.PYTHONVERSION }}
    - name: Download python SDK
      if: (contains(inputs.sdk, 'python') || (contains(inputs.sdk, 'all') && !contains(inputs.sdk, '!all'))) && !contains(inputs.sdk, '!python')
      uses: actions/download-artifact@v2
      with:
        name: python-sdk.tar.gz
        path: ${{ github.workspace }}/sdk/
    - name: Uncompress python SDK
      if: (contains(inputs.sdk, 'python') || (contains(inputs.sdk, 'all') && !contains(inputs.sdk, '!all'))) && !contains(inputs.sdk, '!python')
      run: tar -zxf ${{ github.workspace }}/sdk/python.tar.gz -C
        ${{ github.workspace }}/sdk/python
      shell: bash
    - name: Install Twine
      if: (contains(inputs.sdk, 'python') || (contains(inputs.sdk, 'all') && !contains(inputs.sdk, '!all'))) && !contains(inputs.sdk, '!python')
      run: python -m pip install pip twine
      shell: bash
    - name: Publish Python SDK
      if: (contains(inputs.sdk, 'python') || (contains(inputs.sdk, 'all') && !contains(inputs.sdk, '!all'))) && !contains(inputs.sdk, '!python')
      run: if [ -n "${PYPI_USERNAME}" ] ;
        then PYPI_PUBLISH_USERNAME=${PYPI_USERNAME};
        else PYPI_PUBLISH_USERNAME="pulumi";
        fi &&
        echo "Publishing Pip package to pypi as ${PYPI_PUBLISH_USERNAME}:" &&
        twine upload
        -u "${PYPI_PUBLISH_USERNAME}" -p "${PYPI_PASSWORD}"
        "${{ github.workspace }}/sdk/python/bin/dist/*"
        --skip-existing
        --verbose
      shell: bash
    - name: Setup Java
      if: (contains(inputs.sdk, 'java') || (contains(inputs.sdk, 'all') && !contains(inputs.sdk, '!all'))) && !contains(inputs.sdk, '!java')
      uses: actions/setup-java@v3
      with:
        cache: gradle
        distribution: temurin
        java-version: ${{ env.JAVAVERSION }}
    - name: Setup Gradle
      if: (contains(inputs.sdk, 'java') || (contains(inputs.sdk, 'all') && !contains(inputs.sdk, '!all'))) && !contains(inputs.sdk, '!java')
      uses: gradle/gradle-build-action@v2
      with:
        gradle-version: "7.6"
    - name: Download java SDK
      if: (contains(inputs.sdk, 'java') || (contains(inputs.sdk, 'all') && !contains(inputs.sdk, '!all'))) && !contains(inputs.sdk, '!java')
      uses: actions/download-artifact@v2
      with:
        name: java-sdk.tar.gz
        path: ${{ github.workspace}}/sdk/
    - name: Uncompress java SDK
      if: (contains(inputs.sdk, 'java') || (contains(inputs.sdk, 'all') && !contains(inputs.sdk, '!all'))) && !contains(inputs.sdk, '!java')
      run: tar -zxf ${{github.workspace}}/sdk/java.tar.gz -C
        ${{github.workspace}}/sdk/java
      shell: bash
    - name: Set PACKAGE_VERSION to Env
      if: (contains(inputs.sdk, 'java') || (contains(inputs.sdk, 'all') && !contains(inputs.sdk, '!all'))) && !contains(inputs.sdk, '!java')
      run: echo "PACKAGE_VERSION=$(pulumictl get version --language generic)" >>
        $GITHUB_ENV
      shell: bash
    - name: Publish Java SDK
      if: (contains(inputs.sdk, 'java') || (contains(inputs.sdk, 'all') && !contains(inputs.sdk, '!all'))) && !contains(inputs.sdk, '!java')
      continue-on-error: true
      uses: gradle/gradle-build-action@9b814496b50909128c6a52622b416c5ffa04db49
      with:
        arguments: publishToSonatype closeAndReleaseSonatypeStagingRepository
        build-root-directory: ./sdk/java
        gradle-version: 7.4.1
